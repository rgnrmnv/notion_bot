import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import requests
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DATABASE_ID = os.getenv("DATABASE_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
last_known_items = {}
SUBSCRIBERS_FILE = "subscribers.txt"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Notion API
headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Notion
def get_notion_data():
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    try:
        response = requests.post(url, headers=headers, timeout=10)
        if response.status_code != 200:
            print("Notion API error:", response.text)
            return []
        data = response.json()
        items = []
        for row in data.get("results", []):
            props = row["properties"]
            group = props.get("–ì—Ä—É–ø–ø–∞", {}).get("select", {}).get("name", "–ë–µ–∑ –≥—Ä—É–ø–ø—ã")
            status = props.get("–°—Ç–∞—Ç—É—Å", {}).get("select", {}).get("name", "–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞")
            name = props.get("Name", {}).get("title", [{}])[0].get("plain_text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            items.append({
                "id": row["id"],
                "name": name,
                "group": group,
                "status": status
            })
        return items
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion:", e)
        return []

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å chat_id –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
def save_subscriber(chat_id):
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            existing = set(line.strip() for line in f if line.strip())
    except FileNotFoundError:
        existing = set()
    
    if str(chat_id) not in existing:
        with open(SUBSCRIBERS_FILE, "a") as f:
            f.write(f"{chat_id}\n")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
def format_items(items):
    if not items:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    text = ""
    for item in items:
        text += f"üîπ {item['name']}\n   –ì—Ä—É–ø–ø–∞: {item['group']}\n   –°—Ç–∞—Ç—É—Å: {item['status']}\n\n"
    return text.strip()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    save_subscriber(chat_id)
    keyboard = [["–ó–¥–æ—Ä–æ–≤—å–µ", "–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞", "–í—Å—ë"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–ª–∏ '–í—Å—ë':",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    items = get_notion_data()
    
    if user_text == "–í—Å—ë":
        filtered = items
    else:
        filtered = [item for item in items if item["group"] == user_text]
    
    msg = format_items(filtered)
    await update.message.reply_text(msg or "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def check_for_updates(context: ContextTypes.DEFAULT_TYPE):
    global last_known_items
    items = get_notion_data()
    current_items = {item["id"]: item for item in items}

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            chat_ids = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        chat_ids = []

    for item_id, item in current_items.items():
        if item_id in last_known_items:
            old_status = last_known_items[item_id]["status"]
            new_status = item["status"]
            if old_status != new_status and new_status in ["–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è", "–ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å"]:
                for chat_id in chat_ids:
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!\n\n{item['name']}\n–°—Ç–∞—Ç—É—Å: {new_status}"
                        )
                    except Exception as e:
                        print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}: {e}")
        last_known_items[item_id] = item

# –ó–∞–ø—É—Å–∫
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (120 —Å–µ–∫—É–Ω–¥)
    application.job_queue.run_repeating(check_for_updates, interval=120, first=10)

    application.run_polling()

if __name__ == "__main__":
    main()